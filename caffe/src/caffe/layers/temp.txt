
template <typename Dtype>
void BaseConvolutionLayer<Dtype>::normalized_all_backward_cpu(Dtype* top_diff,
  const Dtype* weights, const Dtype* input_img, const Dtype* input_emb, 
  Dtype* weight_diff, Dtype* img_diff, Dtype* emb_diff, Dtype* scale_diff) {

  const int img_count = col_buffer_.count();
  const int emb_count = emb_col_buffer_.count();

  // get fresh copies of these
  conv_im2col_cpu(input_img, col_buffer_.mutable_cpu_data());
  conv_im2dist_cpu(input_emb, emb_col_buffer_.mutable_cpu_data(), 
  		   diff_col_buffer_.mutable_cpu_data());
  // scale the embs
  Dtype* scale_factor = this->blobs_[scale_ind_].get()->mutable_cpu_data();
  caffe_cpu_scale(emb_count, -scale_factor[0], 
		  emb_col_buffer_.cpu_data(), 
		  emb_col_buffer_.mutable_cpu_data());
  // exp the embs
  caffe_exp(emb_count, 
  	    emb_col_buffer_.cpu_data(), 
  	    emb_col_buffer_.mutable_cpu_data());
  // multiply the two
  for (int c=0; c < conv_in_channels_; ++c) {
    caffe_mul(emb_count,
  	      emb_col_buffer_.cpu_data(),
  	      col_buffer_.cpu_data() + c * emb_count,
  	      res_col_buffer_.mutable_cpu_data() + c * emb_count);
  }
  // gemm into weight diff
  for (int g = 0; g < group_; ++g) {
    caffe_cpu_gemm<Dtype>(CblasNoTrans, CblasTrans, conv_out_channels_ / group_,
        kernel_dim_, conv_out_spatial_dim_,
        (Dtype)1., top_diff + output_offset_ * g,  res_col_buffer_.cpu_data() + col_offset_ * g,
        (Dtype)1., weight_diff + weight_offset_ * g);
  }
  // gemm into res_col_buffer_
  for (int g = 0; g < group_; ++g) {
    caffe_cpu_gemm<Dtype>(CblasTrans, CblasNoTrans, kernel_dim_,
        conv_out_spatial_dim_, conv_out_channels_ / group_,
        (Dtype)1., weights + weight_offset_ * g, top_diff + output_offset_ * g,
        (Dtype)0., res_col_buffer_.mutable_cpu_data() + col_offset_ * g);
  }
  // multiply by exp(scale(emb))
  for (int c=0; c < conv_in_channels_; ++c) {
    caffe_mul(emb_count,
  	      emb_col_buffer_.cpu_data(),
  	      res_col_buffer_.cpu_data() + c * emb_count,
  	      res_col_buffer_.mutable_cpu_data() + c * emb_count);
  }
  // col2im for img_diff
  conv_col2im_cpu(res_col_buffer_.cpu_data(), img_diff);
  // mult by img
  caffe_mul(img_count, 
	    col_buffer_.cpu_data(),
	    res_col_buffer_.cpu_data(),
	    res_col_buffer_.mutable_cpu_data());
  // scale the result
  caffe_cpu_scale(img_count, 
		  -scale_factor[0], 
		  res_col_buffer_.cpu_data(), 
		  res_col_buffer_.mutable_cpu_data());
  // sum it down to one channel for the sake of dist2im
  for (int c=1; c < conv_in_channels_; ++c) {
    caffe_axpy(emb_count,
	       Dtype(1),
	       res_col_buffer_.cpu_data() + c * emb_count,
	       res_col_buffer_.mutable_cpu_data());
  }
  // dist2im for emb_diff
  conv_dist2im_cpu(res_col_buffer_.cpu_data(), 
		     diff_col_buffer_.cpu_data(), 
		     emb_diff);
  // const int img_count = col_buffer_.count();
  // const int emb_count = emb_col_buffer_.count();
  // // gemm into res_col_buffer_
  // for (int g = 0; g < group_; ++g) {
  //   caffe_cpu_gemm<Dtype>(CblasTrans, CblasNoTrans, kernel_dim_,
  //       conv_out_spatial_dim_, conv_out_channels_ / group_,
  //       (Dtype)1., weights + weight_offset_ * g, top_diff + output_offset_ * g,
  //       (Dtype)0., res_col_buffer_.mutable_cpu_data() + col_offset_ * g);
  // }
  // // get fresh copies of these
  // conv_im2col_cpu(input_img, col_buffer_.mutable_cpu_data());
  // conv_im2dist_cpu(input_emb, emb_col_buffer_.mutable_cpu_data(), 
  // 		   diff_col_buffer_.mutable_cpu_data());
  // // mult by img
  // caffe_mul(img_count, 
  // 	    col_buffer_.cpu_data(), 
  // 	    res_col_buffer_.cpu_data(), 
  // 	    res_col_buffer_.mutable_cpu_data());
  // // mult by orig emb
  // for (int c=0; c < conv_in_channels_; ++c) {
  //   caffe_mul(emb_count,
  // 	      emb_col_buffer_.cpu_data(),
  // 	      res_col_buffer_.cpu_data() + c * emb_count,
  // 	      res_col_buffer_.mutable_cpu_data() + c * emb_count);
  // }
  // // scale the emb
  // Dtype* scale_factor = this->blobs_[scale_ind_].get()->mutable_cpu_data();
  // caffe_cpu_scale(emb_count, -scale_factor[0], 
  // 		  emb_col_buffer_.cpu_data(), 
  // 		  emb_col_buffer_.mutable_cpu_data());
  // // exp the emb
  // caffe_exp(emb_count, 
  // 	    emb_col_buffer_.cpu_data(), 
  // 	    emb_col_buffer_.mutable_cpu_data());
  // // mult by exp(scale(emb))
  // for (int c=0; c < conv_in_channels_; ++c) {
  //   caffe_mul(emb_count,
  // 	      emb_col_buffer_.cpu_data(),
  // 	      res_col_buffer_.cpu_data() + c * emb_count,
  // 	      res_col_buffer_.mutable_cpu_data() + c * emb_count);
  // }
  // // mult by scale sign
  // caffe_cpu_scale(img_count, Dtype(-1), res_col_buffer_.cpu_data(), res_col_buffer_.mutable_cpu_data());
  // // add it up
  // caffe_cpu_gemv<Dtype>(CblasNoTrans, num_output_, img_count, 1.,
  // 			res_col_buffer_.cpu_data(), sum_multiplier_.cpu_data(), 1., scale_diff);
